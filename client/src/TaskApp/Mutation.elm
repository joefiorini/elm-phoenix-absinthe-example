-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module TaskApp.Mutation exposing (..)

import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import TaskApp.InputObject
import TaskApp.Interface
import TaskApp.Object
import TaskApp.Scalar
import TaskApp.Union


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootMutation
selection constructor =
    Object.selection constructor


type alias CompleteTaskRequiredArguments =
    { id : TaskApp.Scalar.Id }


completeTask : CompleteTaskRequiredArguments -> SelectionSet decodesTo TaskApp.Object.Task -> Field (Maybe decodesTo) RootMutation
completeTask requiredArgs object =
    Object.selectionField "completeTask" [ Argument.required "id" requiredArgs.id (\(TaskApp.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


type alias CreateTaskOptionalArguments =
    { description : OptionalArgument String }


type alias CreateTaskRequiredArguments =
    { name : String }


createTask : (CreateTaskOptionalArguments -> CreateTaskOptionalArguments) -> CreateTaskRequiredArguments -> SelectionSet decodesTo TaskApp.Object.Task -> Field (Maybe decodesTo) RootMutation
createTask fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { description = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionField "createTask" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object (identity >> Decode.nullable)


type alias UncompleteTaskRequiredArguments =
    { id : TaskApp.Scalar.Id }


uncompleteTask : UncompleteTaskRequiredArguments -> SelectionSet decodesTo TaskApp.Object.Task -> Field (Maybe decodesTo) RootMutation
uncompleteTask requiredArgs object =
    Object.selectionField "uncompleteTask" [ Argument.required "id" requiredArgs.id (\(TaskApp.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)
